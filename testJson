{
  "openapi": "3.0.0",
  "info": {
    "title": "Platform",
    "description": "All of the awesome MX things!",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://api.mx.local:3000"
    }
  ],
  "paths": {
    "/users/{user_guid}/holdings": {
      "get": {
        "tags": [
          "Holdings"
        ],
        "operationId": "Holdings-show",
        "parameters": [
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Holding"
                  }
                },
                "example": {
                  "holdings": [
                    {
                      "account_guid": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1",
                      "cost_basis": 827,
                      "created_at": "2015-04-13T18:01:23Z",
                      "currency_code": "USD",
                      "cusip": "18383M878",
                      "daily_change": 2.5,
                      "description": "Guggenheim Defensive Equity ETF",
                      "guid": "HOL-d65683e8-9eab-26bb-bcfd-ced159c9abe2",
                      "holding_type": "MONEY_MARKET",
                      "holding_type_id": 1,
                      "id": "ID-123",
                      "market_value": 989.5,
                      "member_guid": "MBR-d65683e8-9eab-26bb-bcfd-ced159c9abe",
                      "metadata": "metadata",
                      "purchase_price": 26.3,
                      "shares": 6,
                      "symbol": "DEF",
                      "updated_at": "2015-04-13T18:01:23Z",
                      "user_guid": "USR-743e5d7f-1116-28fa-5de1-d3ba02e41d8d"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "User holdings successfully retrieved."
          }
        },
        "description": "This endpoint returns all holdings associated with the specified user across all accounts and members.",
        "summary": "This endpoint returns all holdings associated with the specified user across all accounts and members."
      }
    },
    "/token": {
      "post": {
        "tags": [
          "Access Tokens Controller"
        ],
        "operationId": "Access Tokens Controller-create",
        "parameters": [
          {
            "name": "code",
            "description": "The one-time-use authorization code provided by the client.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grant_type",
            "description": "The grant type must be set to `authorization_code`.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "200": {
            "description": "Token response successfully created."
          }
        },
        "description": "1. This endpoint is for *processors only*. Note the use of a `processor_id` rather than a `client_id` for authentication.\n    2. Codes used in this request are one-time use.\n    Processors use this endpoint to request an `access_token` by exchanging the authorization code passed to them by a client. Set the grant_type and the code as query parameters.\n    `access_tokens` expire 60 days from the time they are issued. After this time, processors will need to get a new code from the client in order to get a new access_token from this endpoint.",
        "summary": "1. This endpoint is for *processors only*. Note the use of a `processor_id` rather than a `client_id` for authentication.\n    2. Codes used in this request are one-time use.\n    Processors use this endpoint to request an `access_token` by exchanging the authorization code passed to them by a client. Set the grant_type and the code as query parameters.\n    `access_tokens` expire 60 days from the time they are issued. After this time, processors will need to get a new code from the client in order to get a new access_token from this endpoint."
      }
    },
    "/users/{user_guid}/categories/{category_guid}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "Categories-index",
        "parameters": [
          {
            "name": "category_guid",
            "description": "The unique identifier for the category. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the user. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                },
                "example": {
                  "category": {
                    "created_at": "2015-04-13T18:01:23Z",
                    "guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                    "is_default": true,
                    "is_income": false,
                    "metadata": "some metadata",
                    "name": "Auto Insurance",
                    "parent_guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                    "updated_at": "2015-05-13T18:01:23Z"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Use this endpoint to read the attributes of either a default category or a custom category, scoped by user."
          }
        },
        "description": "Use this endpoint to read the attributes of either a default category or a custom category, scoped by user.",
        "summary": "Use this endpoint to read the attributes of either a default category or a custom category, scoped by user."
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "operationId": "Categories-destroy",
        "parameters": [
          {
            "name": "category_guid",
            "description": "The unique identifier for the category. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the user. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Custom `category` successfully deleted."
          }
        },
        "description": "Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.\n  Deleting a custom category may have an effect on existing transaction rules. If the deleted `category` was associated with a rule, any transactions related to that rule will have their `category` field set to the *parent* of the deleted category.",
        "summary": "Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.\n  Deleting a custom category may have an effect on existing transaction rules. If the deleted `category` was associated with a rule, any transactions related to that rule will have their `category` field set to the *parent* of the deleted category."
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "operationId": "Categories-update",
        "parameters": [
          {
            "name": "category_guid",
            "description": "The unique identifier for the category. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the user. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                },
                "example": {
                  "category": {
                    "created_at": "2015-04-13T18:01:23Z",
                    "guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                    "is_default": true,
                    "is_income": false,
                    "metadata": "some metadata",
                    "name": "Auto Insurance",
                    "parent_guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                    "updated_at": "2015-05-13T18:01:23Z"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Category successfully updated."
          }
        },
        "description": "Use this endpoint to update the attributes of a custom category according to its unique GUID.\n  Updating a custom category `name` that is associated with a transaction rule will have cascading effects on any transactions the rule has been applied to: *all transactions associated with that rule will be updated with the new category name as well*.",
        "summary": "Use this endpoint to update the attributes of a custom category according to its unique GUID.\n  Updating a custom category `name` that is associated with a transaction rule will have cascading effects on any transactions the rule has been applied to: *all transactions associated with that rule will be updated with the new category name as well*.",
        "requestBody": {
          "description": "category",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        }
      }
    },
    "/categories/default": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "Categories-default",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                },
                "example": {
                  "categories": [
                    {
                      "created_at": "2015-04-13T18:01:23Z",
                      "guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                      "is_default": true,
                      "is_income": false,
                      "metadata": "some metadata",
                      "name": "Auto Insurance",
                      "parent_guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                      "updated_at": "2015-05-13T18:01:23Z"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "Default categories successfully retrieved."
          }
        },
        "description": "Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories.\n    Both the *list default categories* and *list default categories by user* endpoints return the same results. The different routes are provided for convenience.",
        "summary": "Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories.\n    Both the *list default categories* and *list default categories by user* endpoints return the same results. The different routes are provided for convenience."
      }
    },
    "/categories/{category_guid}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "operationId": "Categories-show",
        "parameters": [
          {
            "name": "category_guid",
            "description": "The unique identifier for the `category`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                },
                "example": {
                  "category": {
                    "created_at": "2015-04-13T18:01:23Z",
                    "guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                    "is_default": true,
                    "is_income": false,
                    "metadata": "some metadata",
                    "name": "Auto Insurance",
                    "parent_guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                    "updated_at": "2015-05-13T18:01:23Z"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Category successfully retrieved."
          }
        },
        "description": "Use this endpoint to read the attributes of a default category.",
        "summary": "Use this endpoint to read the attributes of a default category."
      }
    },
    "/user/{user_guid}/categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "operationId": "Categories-create",
        "parameters": [
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                },
                "example": {
                  "categories": [
                    {
                      "created_at": "2015-04-13T18:01:23Z",
                      "guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                      "is_default": true,
                      "is_income": false,
                      "metadata": "some metadata",
                      "name": "Auto Insurance",
                      "parent_guid": "CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",
                      "updated_at": "2015-05-13T18:01:23Z"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "Custom Category successfully created."
          }
        },
        "description": "Use this endpoint to create a new custom category for a specific user.",
        "summary": "Use this endpoint to create a new custom category for a specific user.",
        "requestBody": {
          "description": "The category you wish to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        }
      }
    },
    "/managed_institutions": {
      "get": {
        "tags": [
          "Managed Institutions"
        ],
        "operationId": "Managed Institutions-index",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                },
                "example": {
                  "institutions": [
                    {
                      "code": "chase",
                      "forgot_password_url": "https://example.url.chase.com/forgot-password",
                      "forgot_username_url": "https://example.url.chase.com/forgot-username",
                      "instructional_text": "Some instructional text <a href=\"https://example.url.chase.com/instructions\" id=\"instructional_text\">for end users</a>.",
                      "medium_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/100x100/default_100x100.png",
                      "name": "Chase Bank",
                      "small_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/50x50/default_50x50.png",
                      "supports_account_identification": true,
                      "supports_account_statement": true,
                      "supports_account_verification": true,
                      "supports_oauth": true,
                      "supports_transaction_history": true,
                      "trouble_signing_in_url": "https://example.url.chase.com/login-trouble",
                      "url": "https://www.chase.com"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed institutions successfully retrieved."
          }
        },
        "description": "This endpoint returns a list of institutions which can be used to create partner-managed members.",
        "summary": "This endpoint returns a list of institutions which can be used to create partner-managed members."
      }
    },
    "/merchant_locations/{merchant_location_guid}": {
      "get": {
        "tags": [
          "Merchant Locations"
        ],
        "operationId": "Merchant Locations-show",
        "parameters": [
          {
            "name": "merchant_location_guid",
            "description": "Scope response to merchant_location_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantLocation"
                }
              }
            }
          },
          "200": {
            "description": "Merchant Location successfully retrieved."
          }
        },
        "description": "This endpoint returns the specified merchant_location resource.",
        "summary": "This endpoint returns the specified merchant_location resource."
      }
    },
    "/users/{user_guid}/members/{member_guid}/statements": {
      "get": {
        "tags": [
          "Statements"
        ],
        "operationId": "Statements-index",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Statement"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Member statements successfully queried."
          }
        },
        "description": "Use this endpoint to get an array of available statements for a member.",
        "summary": "Use this endpoint to get an array of available statements for a member."
      }
    },
    "/users/{user_guid}/members/{member_guid}/statements/{statement_guid}": {
      "get": {
        "tags": [
          "Statements"
        ],
        "operationId": "Statements-show",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statement_guid",
            "description": "Scope response to statement_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statement"
                }
              }
            }
          }
        },
        "description": "Use this endpoint to read a JSON representation of the `statement`.",
        "summary": "Use this endpoint to read a JSON representation of the `statement`."
      }
    },
    "/users/{user_guid}/tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "operationId": "Tags-create",
        "parameters": [
          {
            "name": "name",
            "description": "name",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "200": {
            "description": "Tag succesfully created."
          }
        },
        "description": "Use this endpoint to create a new custom tag.",
        "summary": "Use this endpoint to create a new custom tag."
      },
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "Tags-index",
        "parameters": [
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "200": {
            "description": "User tags successfully retrieved"
          }
        },
        "description": "Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.",
        "summary": "Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default."
      }
    },
    "/users/{user_guid}/tags/{tag_guid}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "operationId": "Tags-destroy",
        "parameters": [
          {
            "name": "tag_guid",
            "description": "Scope response to tag_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully deleted."
          }
        },
        "description": "Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.\n    Deleting a `tag` also deletes every `tagging` which references the deleted tag.",
        "summary": "Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.\n    Deleting a `tag` also deletes every `tagging` which references the deleted tag."
      },
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "Tags-show",
        "parameters": [
          {
            "name": "tag_guid",
            "description": "Scope response to tag_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "200": {
            "description": "Tag successfully retrieved."
          }
        },
        "description": "Use this endpoint to read the attributes of a particular tag according to its unique GUID.",
        "summary": "Use this endpoint to read the attributes of a particular tag according to its unique GUID."
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "operationId": "Tags-update",
        "parameters": [
          {
            "name": "tag_guid",
            "description": "Scope response to tag_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "200": {
            "description": "Tag successfully updated."
          }
        },
        "description": "Use this endpoint to update the name of a specific tag according to its unique GUID.",
        "summary": "Use this endpoint to update the name of a specific tag according to its unique GUID."
      }
    },
    "/merchants": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants-index",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Merchant"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Merchant list successfully retrieved."
          }
        },
        "description": "This endpoint returns a paginated list of all the merchants in the MX system.",
        "summary": "This endpoint returns a paginated list of all the merchants in the MX system."
      }
    },
    "/merchants/{merchant_guid}": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "operationId": "Merchants-show",
        "parameters": [
          {
            "name": "merchant_guid",
            "description": "Scope response to merchant_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "200": {
            "description": "Specified `merchant` successfully retrieved."
          }
        },
        "description": "This endpoint returns the attributes of the specified merchant.",
        "summary": "This endpoint returns the attributes of the specified merchant."
      }
    },
    "/users/{user_guid}/managed_members": {
      "get": {
        "tags": [
          "ManagedMembers"
        ],
        "operationId": "ManagedMembers-index",
        "parameters": [
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                },
                "example": {
                  "members": [
                    {
                      "aggregated_at": "2016-10-13T18:07:57Z",
                      "background_aggregation_is_disabled": false,
                      "connection_status": "CONNECTED",
                      "guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                      "id": "unique_id",
                      "institution_code": "chase",
                      "is_being_aggregated": false,
                      "is_managed_by_user": false,
                      "is_oauth": false,
                      "metadata": "\"credentials_last_refreshed_at\": \"2015-10-15\"",
                      "name": "Chase Bank",
                      "oauth_window_uri": "https://mxbank.mx.com/oauth/authorize?client_id=b8OikQ4Ep3NuSUrQ13DdvFuwpNx-qqoAsJDVAQCyLkQ&redirect_uri=https%3A%2F%2Fint-app.moneydesktop.com%2Foauth%2Fredirect_from&response_type=code&scope=openid&state=d745bd4ee6f0f9c184757f574bcc2df2",
                      "successfully_aggregated_at": "2016-10-13T17:57:38Z",
                      "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                      "user_id": "user123"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed members successfully retrieved."
          }
        },
        "description": "This endpoint returns a list of all the partner-managed members associated with the specified `user`.",
        "summary": "This endpoint returns a list of all the partner-managed members associated with the specified `user`."
      },
      "post": {
        "tags": [
          "ManagedMembers"
        ],
        "operationId": "ManagedMembers-create",
        "parameters": [
          {
            "name": "member",
            "description": "member",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Member"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                },
                "example": {
                  "member": {
                    "aggregated_at": "2016-10-13T18:07:57Z",
                    "background_aggregation_is_disabled": false,
                    "connection_status": "CONNECTED",
                    "guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "id": "unique_id",
                    "institution_code": "chase",
                    "is_being_aggregated": false,
                    "is_managed_by_user": false,
                    "is_oauth": false,
                    "metadata": "\"credentials_last_refreshed_at\": \"2015-10-15\"",
                    "name": "Chase Bank",
                    "oauth_window_uri": "https://mxbank.mx.com/oauth/authorize?client_id=b8OikQ4Ep3NuSUrQ13DdvFuwpNx-qqoAsJDVAQCyLkQ&redirect_uri=https%3A%2F%2Fint-app.moneydesktop.com%2Foauth%2Fredirect_from&response_type=code&scope=openid&state=d745bd4ee6f0f9c184757f574bcc2df2",
                    "successfully_aggregated_at": "2016-10-13T17:57:38Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed member successfully created."
          }
        },
        "description": "Use this endpoint to create a new partner-managed `member`.",
        "summary": "Use this endpoint to create a new partner-managed `member`."
      }
    },
    "/users/{user_guid}/managed_members/{member_guid}": {
      "get": {
        "tags": [
          "ManagedMembers"
        ],
        "operationId": "ManagedMembers-show",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                },
                "example": {
                  "member": {
                    "aggregated_at": "2016-10-13T18:07:57Z",
                    "background_aggregation_is_disabled": false,
                    "connection_status": "CONNECTED",
                    "guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "id": "unique_id",
                    "institution_code": "chase",
                    "is_being_aggregated": false,
                    "is_managed_by_user": false,
                    "is_oauth": false,
                    "metadata": "\"credentials_last_refreshed_at\": \"2015-10-15\"",
                    "name": "Chase Bank",
                    "oauth_window_uri": "https://mxbank.mx.com/oauth/authorize?client_id=b8OikQ4Ep3NuSUrQ13DdvFuwpNx-qqoAsJDVAQCyLkQ&redirect_uri=https%3A%2F%2Fint-app.moneydesktop.com%2Foauth%2Fredirect_from&response_type=code&scope=openid&state=d745bd4ee6f0f9c184757f574bcc2df2",
                    "successfully_aggregated_at": "2016-10-13T17:57:38Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed member successfully retrieved."
          }
        },
        "description": "This endpoint returns the attributes of the specified partner-managed member.",
        "summary": "This endpoint returns the attributes of the specified partner-managed member."
      },
      "put": {
        "tags": [
          "ManagedMembers"
        ],
        "operationId": "ManagedMembers-update",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                },
                "example": {
                  "member": {
                    "aggregated_at": "2016-10-13T18:07:57Z",
                    "background_aggregation_is_disabled": false,
                    "connection_status": "CONNECTED",
                    "guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "id": "unique_id",
                    "institution_code": "chase",
                    "is_being_aggregated": false,
                    "is_managed_by_user": false,
                    "is_oauth": false,
                    "metadata": "\"credentials_last_refreshed_at\": \"2015-10-15\"",
                    "name": "Chase Bank",
                    "oauth_window_uri": "https://mxbank.mx.com/oauth/authorize?client_id=b8OikQ4Ep3NuSUrQ13DdvFuwpNx-qqoAsJDVAQCyLkQ&redirect_uri=https%3A%2F%2Fint-app.moneydesktop.com%2Foauth%2Fredirect_from&response_type=code&scope=openid&state=d745bd4ee6f0f9c184757f574bcc2df2",
                    "successfully_aggregated_at": "2016-10-13T17:57:38Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed member successfully updated."
          }
        },
        "description": "Use this endpoint to update the attributes of the specified partner_managed `member`.",
        "summary": "Use this endpoint to update the attributes of the specified partner_managed `member`."
      },
      "delete": {
        "tags": [
          "ManagedMembers"
        ],
        "operationId": "ManagedMembers-destroy",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mananged member successfully deleted."
          }
        },
        "description": "Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.",
        "summary": "Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource."
      }
    },
    "/users/{user_guid}/managed_members/{member_guid}/accounts": {
      "post": {
        "tags": [
          "Managed Accounts"
        ],
        "operationId": "Managed Accounts-create",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "example": {
                  "account": {
                    "account_number": "5366",
                    "apr": 1,
                    "apy": 1,
                    "available_balance": 1000,
                    "available_credit": 1000,
                    "balance": 1000,
                    "cash_balance": 1000,
                    "cash_surrender_value": 1000,
                    "created_at": "2016-10-13T17:57:37Z",
                    "credit_limit": 100,
                    "currency_code": "USD",
                    "day_payment_is_due": 20,
                    "death_benefit": 1000,
                    "guid": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1",
                    "holdings_value": 1000,
                    "id": "1040434698",
                    "imported_at": "2015-10-13T17:57:37Z",
                    "institution_code": "chase",
                    "insured_name": "Frodo Baggins",
                    "interest_rate": 1,
                    "is_business": false,
                    "is_closed": false,
                    "is_hidden": false,
                    "is_manual": false,
                    "last_payment": 100,
                    "last_payment_at": "2015-10-13T17:57:37Z",
                    "loan_amount": 1000,
                    "matures_on": "2015-10-13T17:57:37Z",
                    "member_guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "member_id": "member123",
                    "member_is_managed_by_user": false,
                    "metadata": "some metadata",
                    "minimum_balance": 100,
                    "minimum_payment": 10,
                    "name": "Test account 2",
                    "nickname": "My Checking",
                    "original_balance": 10,
                    "pay_out_amount": 10,
                    "payment_due_at": "2015-10-13T17:57:37Z",
                    "payoff_balance": 10,
                    "premium_amount": 1,
                    "property_type": "1",
                    "routing_number": "68899990000000",
                    "started_on": "2015-10-13T17:57:37Z",
                    "subtype": "NONE",
                    "total_account_value": 1,
                    "type": "SAVINGS",
                    "updated_at": "2016-10-13T18:08:00Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed account successfully created."
          }
        },
        "description": "Use this endpoint to create a partner-managed account.",
        "summary": "Use this endpoint to create a partner-managed account.",
        "requestBody": {
          "description": "account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Managed Accounts"
        ],
        "operationId": "Managed Accounts-index",
        "parameters": [
          {
            "name": "member_guid",
            "description": "The unique identifier for the `member` associated with the `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the `user` associated with the `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                },
                "example": {
                  "account": {
                    "account_number": "5366",
                    "apr": 1,
                    "apy": 1,
                    "available_balance": 1000,
                    "available_credit": 1000,
                    "balance": 1000,
                    "cash_balance": 1000,
                    "cash_surrender_value": 1000,
                    "created_at": "2016-10-13T17:57:37Z",
                    "credit_limit": 100,
                    "currency_code": "USD",
                    "day_payment_is_due": 20,
                    "death_benefit": 1000,
                    "guid": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1",
                    "holdings_value": 1000,
                    "id": "1040434698",
                    "imported_at": "2015-10-13T17:57:37Z",
                    "institution_code": "chase",
                    "insured_name": "Frodo Baggins",
                    "interest_rate": 1,
                    "is_business": false,
                    "is_closed": false,
                    "is_hidden": false,
                    "is_manual": false,
                    "last_payment": 100,
                    "last_payment_at": "2015-10-13T17:57:37Z",
                    "loan_amount": 1000,
                    "matures_on": "2015-10-13T17:57:37Z",
                    "member_guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "member_id": "member123",
                    "member_is_managed_by_user": false,
                    "metadata": "some metadata",
                    "minimum_balance": 100,
                    "minimum_payment": 10,
                    "name": "Test account 2",
                    "nickname": "My Checking",
                    "original_balance": 10,
                    "pay_out_amount": 10,
                    "payment_due_at": "2015-10-13T17:57:37Z",
                    "payoff_balance": 10,
                    "premium_amount": 1,
                    "property_type": "1",
                    "routing_number": "68899990000000",
                    "started_on": "2015-10-13T17:57:37Z",
                    "subtype": "NONE",
                    "total_account_value": 1,
                    "type": "SAVINGS",
                    "updated_at": "2016-10-13T18:08:00Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed accounts successfully retrieved."
          }
        },
        "description": "Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-managed member.",
        "summary": "Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-managed member."
      }
    },
    "/uses/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}": {
      "delete": {
        "tags": [
          "Managed Accounts"
        ],
        "operationId": "Managed Accounts-destroy",
        "parameters": [
          {
            "name": "account_guid",
            "description": "The unique identifier for the managed `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member_guid",
            "description": "The unique identifier for the `member` associated with the `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the `user` associated with the `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account successfully deleted"
          }
        },
        "description": "Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.",
        "summary": "Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`."
      }
    },
    "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}": {
      "get": {
        "tags": [
          "Managed Accounts"
        ],
        "operationId": "Managed Accounts-show",
        "parameters": [
          {
            "name": "account_guid",
            "description": "Scope response to account_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "example": {
                  "account": {
                    "account_number": "5366",
                    "apr": 1,
                    "apy": 1,
                    "available_balance": 1000,
                    "available_credit": 1000,
                    "balance": 1000,
                    "cash_balance": 1000,
                    "cash_surrender_value": 1000,
                    "created_at": "2016-10-13T17:57:37Z",
                    "credit_limit": 100,
                    "currency_code": "USD",
                    "day_payment_is_due": 20,
                    "death_benefit": 1000,
                    "guid": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1",
                    "holdings_value": 1000,
                    "id": "1040434698",
                    "imported_at": "2015-10-13T17:57:37Z",
                    "institution_code": "chase",
                    "insured_name": "Frodo Baggins",
                    "interest_rate": 1,
                    "is_business": false,
                    "is_closed": false,
                    "is_hidden": false,
                    "is_manual": false,
                    "last_payment": 100,
                    "last_payment_at": "2015-10-13T17:57:37Z",
                    "loan_amount": 1000,
                    "matures_on": "2015-10-13T17:57:37Z",
                    "member_guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "member_id": "member123",
                    "member_is_managed_by_user": false,
                    "metadata": "some metadata",
                    "minimum_balance": 100,
                    "minimum_payment": 10,
                    "name": "Test account 2",
                    "nickname": "My Checking",
                    "original_balance": 10,
                    "pay_out_amount": 10,
                    "payment_due_at": "2015-10-13T17:57:37Z",
                    "payoff_balance": 10,
                    "premium_amount": 1,
                    "property_type": "1",
                    "routing_number": "68899990000000",
                    "started_on": "2015-10-13T17:57:37Z",
                    "subtype": "NONE",
                    "total_account_value": 1,
                    "type": "SAVINGS",
                    "updated_at": "2016-10-13T18:08:00Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed account successfully retrieved."
          }
        },
        "description": "Use this endpoint to read the attributes of a partner-managed account according to its unique guid.",
        "summary": "Use this endpoint to read the attributes of a partner-managed account according to its unique guid."
      },
      "put": {
        "tags": [
          "Managed Accounts"
        ],
        "operationId": "Managed Accounts-update",
        "parameters": [
          {
            "name": "account",
            "description": "account",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          },
          {
            "name": "account_guid",
            "description": "The unique identifier for the managed `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member_guid",
            "description": "The unique identifier for the `member` associated with the `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the `user` associated with the `account`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "example": {
                  "account": {
                    "account_number": "5366",
                    "apr": 1,
                    "apy": 1,
                    "available_balance": 1000,
                    "available_credit": 1000,
                    "balance": 1000,
                    "cash_balance": 1000,
                    "cash_surrender_value": 1000,
                    "created_at": "2016-10-13T17:57:37Z",
                    "credit_limit": 100,
                    "currency_code": "USD",
                    "day_payment_is_due": 20,
                    "death_benefit": 1000,
                    "guid": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1",
                    "holdings_value": 1000,
                    "id": "1040434698",
                    "imported_at": "2015-10-13T17:57:37Z",
                    "institution_code": "chase",
                    "insured_name": "Frodo Baggins",
                    "interest_rate": 1,
                    "is_business": false,
                    "is_closed": false,
                    "is_hidden": false,
                    "is_manual": false,
                    "last_payment": 100,
                    "last_payment_at": "2015-10-13T17:57:37Z",
                    "loan_amount": 1000,
                    "matures_on": "2015-10-13T17:57:37Z",
                    "member_guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "member_id": "member123",
                    "member_is_managed_by_user": false,
                    "metadata": "some metadata",
                    "minimum_balance": 100,
                    "minimum_payment": 10,
                    "name": "Test account 2",
                    "nickname": "My Checking",
                    "original_balance": 10,
                    "pay_out_amount": 10,
                    "payment_due_at": "2015-10-13T17:57:37Z",
                    "payoff_balance": 10,
                    "premium_amount": 1,
                    "property_type": "1",
                    "routing_number": "68899990000000",
                    "started_on": "2015-10-13T17:57:37Z",
                    "subtype": "NONE",
                    "total_account_value": 1,
                    "type": "SAVINGS",
                    "updated_at": "2016-10-13T18:08:00Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          }
        },
        "description": "Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.",
        "summary": "Use this endpoint to update the attributes of a partner-managed account according to its unique GUID."
      }
    },
    "/users/{user_guid}/members/{member_guid}/account_owners": {
      "get": {
        "tags": [
          "Account Owners"
        ],
        "operationId": "Account Owners-index",
        "parameters": [
          {
            "name": "member_guid",
            "description": "The unique identifier for the member associated with a particular set of account and routing numbers. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the user associated with a particular set of account and routing numbers. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountOwner"
                  }
                },
                "example": {
                  "account_owners": [
                    {
                      "account_guid": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1",
                      "address": "123 This Way",
                      "city": "Middlesex",
                      "country": "US",
                      "email": "donnie@darko.co",
                      "first_name": "Donnie",
                      "guid": "ACO-63dc7714-6fc0-4aa2-a069-c06cdccd1af9",
                      "last_name": "Darko",
                      "member_guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                      "owner_name": "Donnie Darko",
                      "phone": "555-555-5555",
                      "postal_code": "00000-0000",
                      "state": "VA",
                      "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "Account owners data successfully retrieved."
          }
        },
        "description": "Use this endpoint to check whether identity data is available for a specific member. It returns the `account_owners` resource, which contains an array with data about the owners of each account associated with the `member`.",
        "summary": "Use this endpoint to check whether identity data is available for a specific member. It returns the `account_owners` resource, which contains an array with data about the owners of each account associated with the `member`."
      }
    },
    "/authorization_code": {
      "post": {
        "tags": [
          "Authorization Codes"
        ],
        "operationId": "Authorization Codes-create",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationCode"
                },
                "example": {
                  "authorization_code": {
                    "code": "9nN-9D8_4Z3WYazx7-zXfmqsD3jwgL_2W927Sb3otI"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Authorization code created successfully."
          }
        },
        "description": "Clients use this endpoint to request an authorization `code` according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request.\n     Before requesting an authorization `code` which includes a `member` in the scope, clients must have (https://docs.mx.com/api#verification_mx_widgets verified that member).",
        "summary": "Clients use this endpoint to request an authorization `code` according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request.\n     Before requesting an authorization `code` which includes a `member` in the scope, clients must have (https://docs.mx.com/api#verification_mx_widgets verified that member).",
        "requestBody": {
          "description": "The scope of data access that will be granted by the authorization `code`. The format of the string is a space-separated list of key-value pairs for the specific resources and features to which access will be granted. Keys and values are separated by a colon, e.g., `user_guid:USR-1234-abcd`. See scope parameters for more information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationCode"
              }
            }
          }
        }
      }
    },
    "/payment_account": {
      "get": {
        "tags": [
          "PaymentAccounts"
        ],
        "operationId": "PaymentAccounts-show",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAccount"
                }
              }
            }
          },
          "200": {
            "description": "Payment account successfully retrieved."
          }
        },
        "description": "Get payment account information scoped to your `access_token`.",
        "summary": "Get payment account information scoped to your `access_token`."
      }
    },
    "/users/{user_guid}/managed_members/{managed_member_guid}/accounts/{account_guid}/transactions": {
      "post": {
        "tags": [
          "ManagedTransactions"
        ],
        "operationId": "ManagedTransactions-create",
        "parameters": [
          {
            "name": "account_guid",
            "description": "Scope response to account_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "description": "amount",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "description": "description",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managed_member_guid",
            "description": "Scope response to managed_member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "description": "status",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transacted_at",
            "description": "transacted_at",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "type",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "200": {
            "description": "Managed transaction successfully created."
          }
        },
        "description": "Use this endpoint to create a new partner-managed `transaction`.",
        "summary": "Use this endpoint to create a new partner-managed `transaction`.",
        "requestBody": {
          "description": "category",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ManagedTransactions"
        ],
        "operationId": "ManagedTransactions-index",
        "parameters": [
          {
            "name": "account_guid",
            "description": "Scope response to account_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_date",
            "description": "Return transactions occurring within a date range starting on this day. The query looks at the `date` field on transactions. If not set, this defaults to 90 days prior to the day of the request. Must be in ISO 8601 format without a time component.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managed_member_guid",
            "description": "Scope response to managed_member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_date",
            "description": "Return transactions occurring in a date range ending on this day. The query looks at the `date` field on transactions. If not set, this defaults to 5 days forward from the day of the request so as to capture pending transactions. Must be in ISO 8601 format without a time component.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Managed transactions successfully retrieved."
          }
        },
        "description": "This endpoint returns a paginated list of partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`. By default, it returns the last 90 days of transactions.\n    You may also request transactions within a specified date range.",
        "summary": "This endpoint returns a paginated list of partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`. By default, it returns the last 90 days of transactions.\n    You may also request transactions within a specified date range."
      }
    },
    "/users/{user_guid}/managed_members/{managed_member_guid}/accounts/{account_guid}/transactions/{transaction_guid}": {
      "delete": {
        "tags": [
          "ManagedTransactions"
        ],
        "operationId": "ManagedTransactions-destroy",
        "parameters": [
          {
            "name": "account_guid",
            "description": "Scope response to account_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managed_member_guid",
            "description": "Scope response to managed_member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_guid",
            "description": "Scope response to transaction_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Managed transaction successfully deleted."
          }
        },
        "description": "Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.",
        "summary": "Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource."
      },
      "get": {
        "tags": [
          "ManagedTransactions"
        ],
        "operationId": "ManagedTransactions-show",
        "parameters": [
          {
            "name": "account_guid",
            "description": "Scope response to account_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managed_member_guid",
            "description": "Scope response to managed_member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_guid",
            "description": "Scope response to transaction_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "200": {
            "description": "Managed transaction successfully retrieved."
          }
        },
        "description": "Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.",
        "summary": "Requests to this endpoint will return the attributes of the specified partner-managed `transaction`."
      },
      "put": {
        "tags": [
          "ManagedTransactions"
        ],
        "operationId": "ManagedTransactions-update",
        "parameters": [
          {
            "name": "account_guid",
            "description": "Scope response to account_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managed_member_guid",
            "description": "Scope response to managed_member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_guid",
            "description": "Scope response to transaction_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "200": {
            "description": "Managed transaction successfully updated."
          }
        },
        "description": "Use this endpoint to update the attributes of the specified partner_managed `transaction`.",
        "summary": "Use this endpoint to update the attributes of the specified partner_managed `transaction`.",
        "requestBody": {
          "description": "amount",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "Users-create",
        "parameters": [
          {
            "example": {
              "user": {
                "email": "email@provider.com",
                "id": "My-Unique-ID",
                "is_disabled": false,
                "metadata": "some metadata",
                "type": "individual",
                "status": "preferred"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "200": {
            "description": "User successfully created."
          }
        },
        "description": "Use this endpoint to create a new `user`. The API will respond with the newly-created `user` object if successful.\n\n   Disabling a `user` means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.",
        "summary": "Use this endpoint to create a new `user`. The API will respond with the newly-created `user` object if successful."
      },
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "Users-index",
        "parameters": [
          {
            "name": "email",
            "description": "User's email address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "description": "MX-assigned user ID",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_disabled",
            "description": "Filter to disabled users",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "List of users matching the parameters in the query string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Search successfully executed"
          }
        },
        "description": "Requests to this endpoint will return a list of users matching the parameters supplied in the query string, or a list of all users if no query string is supplied.",
        "summary": "Requests to this endpoint will return a list of users matching the parameters supplied in the query string, or a list of all users if no query string is supplied."
      }
    },
    "/users/{user_guid}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "Users-destroy",
        "parameters": [
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted."
          }
        },
        "description": "Use this endpoint to delete the specified `user`. The response will have a status of 204 No Content without an object.",
        "summary": "Use this endpoint to delete the specified `user`. The response will have a status of 204 No Content without an object."
      },
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "Users-show",
        "parameters": [
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "200": {
            "description": "User successfully retrieved."
          }
        },
        "description": "Requests to this endpoint will return the details of the specified `user`.",
        "summary": "Requests to this endpoint will return the details of the specified `user`."
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "Users-update",
        "parameters": [
          {
            "name": "email",
            "description": "User's email address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "description": "MX-assigned user ID",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_disabled",
            "description": "Filter to disabled users",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "metadata",
            "description": "Additional information a partner can store on the `user`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The updated `user` model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "200": {
            "description": "User successfully updated"
          }
        },
        "description": "Use this endpoint to update the attributes of the specified `user`.",
        "summary": "Use this endpoint to update the attributes of the specified `user`."
      }
    },
    "/institutions/favorites": {
      "get": {
        "tags": [
          "Institutions"
        ],
        "operationId": "Institutions-favorites",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                },
                "example": {
                  "institutions": [
                    {
                      "code": "chase",
                      "forgot_password_url": "https://example.url.chase.com/forgot-password",
                      "forgot_username_url": "https://example.url.chase.com/forgot-username",
                      "instructional_text": "Some instructional text <a href=\"https://example.url.chase.com/instructions\" id=\"instructional_text\">for end users</a>.",
                      "medium_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/100x100/default_100x100.png",
                      "name": "Chase Bank",
                      "small_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/50x50/default_50x50.png",
                      "supports_account_identification": true,
                      "supports_account_statement": true,
                      "supports_account_verification": true,
                      "supports_oauth": true,
                      "supports_transaction_history": true,
                      "trouble_signing_in_url": "https://example.url.chase.com/login-trouble",
                      "url": "https://www.chase.com"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity.\n   Please contact MX to set a list of favorites."
          }
        },
        "description": "This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity.\n   Please contact MX to set a list of favorites.",
        "summary": "This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity.\n   Please contact MX to set a list of favorites."
      }
    },
    "/institutions": {
      "get": {
        "tags": [
          "Institutions"
        ],
        "operationId": "Institutions-index",
        "parameters": [
          {
            "name": "name",
            "description": "Only institutions whose name contains the appended string will be returned.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supports_account_identification",
            "description": "Only institutions which support {https://docs.mx.com/api#identification_identity identity} will be returned.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "supports_account_statement",
            "description": "Only institutions which offer access to account statements will be returned.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "supports_account_verification",
            "description": "Only institutions which support {https://docs.mx.com/api#verification_account_verification account verification} will be returned.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "supports_transaction_history",
            "description": "Only institutions which offer an extended transaction history will be returned.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                },
                "example": {
                  "institutions": [
                    {
                      "code": "chase",
                      "forgot_password_url": "https://example.url.chase.com/forgot-password",
                      "forgot_username_url": "https://example.url.chase.com/forgot-username",
                      "instructional_text": "Some instructional text <a href=\"https://example.url.chase.com/instructions\" id=\"instructional_text\">for end users</a>.",
                      "medium_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/100x100/default_100x100.png",
                      "name": "Chase Bank",
                      "small_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/50x50/default_50x50.png",
                      "supports_account_identification": true,
                      "supports_account_statement": true,
                      "supports_account_verification": true,
                      "supports_oauth": true,
                      "supports_transaction_history": true,
                      "trouble_signing_in_url": "https://example.url.chase.com/login-trouble",
                      "url": "https://www.chase.com"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "Request succeeded"
          }
        },
        "description": "This endpoint returns a list of institutions based on the specified search term or parameter.\n    This endpoint does not tell you what credentials are required to log on to an institution’s website. For that, you’ll need to call the {https://docs.mx.com/api#core_resources_institutions_list_institution_required_credentials list required credentials} endpoint.",
        "summary": "This endpoint returns a list of institutions based on the specified search term or parameter.\n    This endpoint does not tell you what credentials are required to log on to an institution’s website. For that, you’ll need to call the {https://docs.mx.com/api#core_resources_institutions_list_institution_required_credentials list required credentials} endpoint."
      }
    },
    "/institutions/{institution_code}": {
      "get": {
        "tags": [
          "Institutions"
        ],
        "operationId": "Institutions-show",
        "parameters": [
          {
            "name": "institution_code",
            "description": "Scope response to institution_code",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                },
                "example": {
                  "institution": {
                    "code": "chase",
                    "forgot_password_url": "https://example.url.chase.com/forgot-password",
                    "forgot_username_url": "https://example.url.chase.com/forgot-username",
                    "instructional_text": "Some instructional text <a href=\"https://example.url.chase.com/instructions\" id=\"instructional_text\">for end users</a>.",
                    "medium_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/100x100/default_100x100.png",
                    "name": "Chase Bank",
                    "small_logo_url": "https://content.moneydesktop.com/storage/MD_Assets/Ipad%20Logos/50x50/default_50x50.png",
                    "supports_account_identification": true,
                    "supports_account_statement": true,
                    "supports_account_verification": true,
                    "supports_oauth": true,
                    "supports_transaction_history": true,
                    "trouble_signing_in_url": "https://example.url.chase.com/login-trouble",
                    "url": "https://www.chase.com"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Request succeeded"
          }
        },
        "description": "This endpoint returns information about the institution specified by `institution_code.`",
        "summary": "This endpoint returns information about the institution specified by `institution_code.`"
      }
    },
    "/users/{user_guid}/transactions/{transaction_guid}": {
      "put": {
        "tags": [
          "Transactions"
        ],
        "operationId": "Transactions-update",
        "parameters": [
          {
            "name": "transaction_guid",
            "description": "The unique identifier for the `transaction`. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "A unique identifier for the `user` to which the `transaction` belongs. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "The updated `transaction` model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "200": {
            "description": "Transaction successfully updated."
          }
        },
        "description": "Use this endpoint to update a `transaction` according to its unique GUID.",
        "summary": "Use this endpoint to update a `transaction` according to its unique GUID."
      }
    },
    "/users/{user_guid}/members": {
      "post": {
        "tags": [
          "Members"
        ],
        "operationId": "Members-create",
        "parameters": [
          {
            "name": "credentials",
            "description": "The credentials endpoint for the requested `institution` will give you a list of all the `credentials` required to create a member for a given `institution`. Each required credential will need to be included within this array.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Credential"
              }
            },
            "explode": true
          },
          {
            "name": "institution_code",
            "description": "The unique code for the `institution` to which the member will connect. Defined by MX.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error when attempting to add multiple members to the same `institution` using the same `credentials` on the same `user`."
          },
          "200": {
            "description": "Member successfully created."
          }
        },
        "description": "This endpoint allows you to create a new member. The API supports both standard members and OAuth members.\n    *Standard Members*\n    Standard members are created with the required parameters `credentials` and `institution_code`.\n    \n    When creating a standard member, you’ll need to include the correct type of credential required by the financial institution, with values provided by the end user. You can find out which credential type is required with the (https://docs.mx.com/api#core_resources_institutions_list_institution_required_credentials list institution-required credentials) endpoint.\n    \n    Once you successfully create a standard member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions. You can prevent this automatic aggregation by setting the `skip_aggregation` parameter to `true`.\n    \n    *OAuth Members*\n    OAuth members can only be created with institutions that support it. OAuth members require no credentials, but do require you to set the `is_oauth` parameter to `true`.\n    \n    New OAuth members will initially have a connection status of `PENDING`; a redirect URI will be provided in the `oauth_window_uri` field of the response. Making a separate request to the MX-provided oauth_window_uri will then take the end user to their financial institution’s website where they can log in and select what data to share with MX. After completing the OAuth process, aggregation automatically will begin and the connection status will update — unless the `skip_aggregation` parameter was set to `true`.\n    \n    `oauth_window_uris` are *one-time use*. Don’t hard code an expected URI into your application.\n    \n    Don’t prepend the `https://` protocol to the URI string, as MX includes this.",
        "summary": "This endpoint allows you to create a new member. The API supports both standard members and OAuth members.\n    *Standard Members*\n    Standard members are created with the required parameters `credentials` and `institution_code`.\n    \n    When creating a standard member, you’ll need to include the correct type of credential required by the financial institution, with values provided by the end user. You can find out which credential type is required with the (https://docs.mx.com/api#core_resources_institutions_list_institution_required_credentials list institution-required credentials) endpoint.\n    \n    Once you successfully create a standard member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions. You can prevent this automatic aggregation by setting the `skip_aggregation` parameter to `true`.\n    \n    *OAuth Members*\n    OAuth members can only be created with institutions that support it. OAuth members require no credentials, but do require you to set the `is_oauth` parameter to `true`.\n    \n    New OAuth members will initially have a connection status of `PENDING`; a redirect URI will be provided in the `oauth_window_uri` field of the response. Making a separate request to the MX-provided oauth_window_uri will then take the end user to their financial institution’s website where they can log in and select what data to share with MX. After completing the OAuth process, aggregation automatically will begin and the connection status will update — unless the `skip_aggregation` parameter was set to `true`.\n    \n    `oauth_window_uris` are *one-time use*. Don’t hard code an expected URI into your application.\n    \n    Don’t prepend the `https://` protocol to the URI string, as MX includes this.",
        "requestBody": {
          "description": "When set to `true`, background aggregation will be disabled for this `member`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "/users/{user_guid}/members/{member_guid}/credentials": {
      "get": {
        "tags": [
          "Members"
        ],
        "operationId": "Members-credentials",
        "parameters": [
          {
            "name": "member_guid",
            "description": "The unique identifier for the member associated with the account. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The MX-assigned user ID. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            }
          }
        },
        "description": "This endpoint returns an array which contains information on every non-MFA `credential` associated with a specific `member`.\n    Institution credentials are not the same as member credentials. Use institution credentials to create a new member and member credentials to update an existing member.",
        "summary": "This endpoint returns an array which contains information on every non-MFA `credential` associated with a specific `member`.\n    Institution credentials are not the same as member credentials. Use institution credentials to create a new member and member credentials to update an existing member."
      }
    },
    "/users/{user_guid}/members/{member_guid}/challenges": {
      "get": {
        "tags": [
          "Members"
        ],
        "operationId": "Members-challenges",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Challenge"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Member does not have a connection status of `CHALLENGED`."
          },
          "200": {
            "description": "Member has a connection status of `CHALLENGED`."
          }
        },
        "description": "Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member.\n     \n     The exact fields returned in the `challenges` object will differ depending on the type of challenge that has been issued. For instance, a challenge with the type `OPTIONS` includes the `options` array, whereas one with the type `TEXT` does not.\n\n     If the aggregation is not challenged, i.e., the `member` does /not/ have a connection status of `CHALLENGED`, then code `204 No Content` will be returned.\n     \n     If the aggregation has been challenged, i.e., the `member` /does/ have a connection status of `CHALLENGED`, then code `200 OK` will be returned along with the corresponding challenges.",
        "summary": "Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member.\n     \n     The exact fields returned in the `challenges` object will differ depending on the type of challenge that has been issued. For instance, a challenge with the type `OPTIONS` includes the `options` array, whereas one with the type `TEXT` does not."
      }
    },
    "/users/{user_guid}/members/{member_guid}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "operationId": "Members-destroy",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Member succesfully deleted."
          }
        },
        "description": "Making a request to this endpoint will permanently delete the specified `member`. A successful response will have the status `204 No Content`.\n     You should not use the delete member endpoint to resolve aggregation errors.",
        "summary": "Making a request to this endpoint will permanently delete the specified `member`. A successful response will have the status `204 No Content`.\n     You should not use the delete member endpoint to resolve aggregation errors."
      },
      "put": {
        "tags": [
          "Members"
        ],
        "operationId": "Members-update",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "200": {
            "description": "Member aggregation successfully updated."
          }
        },
        "description": "Use this endpoint to update certain attributes of the specified `member`. To get a list of the required credentials for a member, use the (https://docs.mx.com/api#core_resources_members_list_member_credentials list member credentials endpoint).",
        "summary": "Use this endpoint to update certain attributes of the specified `member`. To get a list of the required credentials for a member, use the (https://docs.mx.com/api#core_resources_members_list_member_credentials list member credentials endpoint).",
        "requestBody": {
          "description": "background_aggregation_is_disabled",
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "/users/{user_guid}/members/{member_guid}/oauth_window_uri": {
      "get": {
        "tags": [
          "Members"
        ],
        "operationId": "Members-oauth_window_uri",
        "parameters": [
          {
            "name": "client_redirect_url",
            "description": "A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with `referral_source=APP`.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referral_source",
            "description": "Must be either `BROWSER` or `APP` depending on the implementation. Defaults to `BROWSER`.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip_aggregation",
            "description": "Setting this parameter to `true` will prevent the member from automatically aggregating after being redirected from the authorization page.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ui_message_webview_url_scheme",
            "description": "A scheme for routing the user back to the application state they were previously in. Only available with `referral_source=APP`.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "200": {
            "description": "OAuth window URI successfully generated."
          }
        },
        "description": "This endpoint will generate an oauth_window_uri for the specified member.\n    Generating a new oauth_window_uri is necessary in order to send the end user through the OAuth process again. There are several situations where you might want to do this. Below are a few examples:\n    A previous attempt at OAuth failed — for instance if the end user closed the OAuth window before completing the process.\n    The financial institution has revoked a previous OAuth token or the token has expired.\n    The member in question must be connected to an institution which supports OAuth. If the institution does not support OAuth, a 400 Bad Request error will be returned with the message Member cannot use OAuth.\n    oauth_window_uris are one-time use. Don’t hard code an expected URI into your application.\n    Don’t prepend the https:// protocol to the URI string, as MX includes this.",
        "summary": "This endpoint will generate an oauth_window_uri for the specified member.\n    Generating a new oauth_window_uri is necessary in order to send the end user through the OAuth process again. There are several situations where you might want to do this. Below are a few examples:\n    A previous attempt at OAuth failed — for instance if the end user closed the OAuth window before completing the process.\n    The financial institution has revoked a previous OAuth token or the token has expired.\n    The member in question must be connected to an institution which supports OAuth. If the institution does not support OAuth, a 400 Bad Request error will be returned with the message Member cannot use OAuth.\n    oauth_window_uris are one-time use. Don’t hard code an expected URI into your application.\n    Don’t prepend the https:// protocol to the URI string, as MX includes this."
      }
    },
    "/users/{user_guid}/members/{member_guid}/status": {
      "get": {
        "tags": [
          "Members"
        ],
        "operationId": "Members-status",
        "parameters": [
          {
            "name": "member_guid",
            "description": "Scope response to member_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "200": {
            "description": "Member status successfully retrieved."
          }
        },
        "description": "This endpoint returns information about the member’s connection to a financial institution, including crucial information about aggregation.\n    The fields returned here should be interpreted together to get a picture of what is happening with the `member`.",
        "summary": "This endpoint returns information about the member’s connection to a financial institution, including crucial information about aggregation.\n    The fields returned here should be interpreted together to get a picture of what is happening with the `member`."
      }
    },
    "/users/{user_guid}/micro_deposits/{micro_deposit_guid}": {
      "get": {
        "tags": [
          "AccountVerification"
        ],
        "operationId": "AccountVerification-index",
        "parameters": [
          {
            "name": "micro_deposit_guid",
            "description": "Scope response to micro_deposit_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MicroDeposit"
                },
                "example": {
                  "micro_deposit": {
                    "account_name": "My Test Account",
                    "account_number": "33331261",
                    "account_type": "CHECKING",
                    "created_at": "2023-06-01T21:12:49Z",
                    "email": "joshyboy2@example.com",
                    "error_code": null,
                    "error_message": null,
                    "first_name": "Joshy",
                    "guid": "MIC-d1351d87-fafc-4935-b2f0-158973e68d34",
                    "institution_code": null,
                    "institution_name": null,
                    "last_name": "Groban",
                    "routing_number": "091000019",
                    "status": "REQUESTED",
                    "updated_at": "2023-06-01T21:12:49Z",
                    "verified_at": null
                  }
                }
              }
            }
          },
          "200": {
            "description": "MicroDeposit successfully retrieved."
          }
        },
        "description": "Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.",
        "summary": "Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID."
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "operationId": "Accounts-index",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Request succeeded"
          }
        },
        "description": "There are multiple endpoints which return the specified `account` resource. This endpoint returns the current `user`'s accounts.",
        "summary": "There are multiple endpoints which return the specified `account` resource. This endpoint returns the current `user`'s accounts."
      }
    },
    "/users/{user_guid}/members/{member_guid}/accounts/{account_guid}": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "operationId": "Accounts-update",
        "parameters": [
          {
            "name": "account_guid",
            "description": "The unique identifier for the account associated with a particular set of account and routing numbers. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "member_guid",
            "description": "The unique identifier for the member associated with a particular set of account and routing numbers. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "The unique identifier for the user associated with a particular set of account and routing numbers. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                },
                "example": {
                  "account": {
                    "account_number": "5366",
                    "apr": 1,
                    "apy": 1,
                    "available_balance": 1000,
                    "available_credit": 1000,
                    "balance": 1000,
                    "cash_balance": 1000,
                    "cash_surrender_value": 1000,
                    "created_at": "2016-10-13T17:57:37Z",
                    "credit_limit": 100,
                    "currency_code": "USD",
                    "day_payment_is_due": 20,
                    "death_benefit": 1000,
                    "guid": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1",
                    "holdings_value": 1000,
                    "id": "1040434698",
                    "imported_at": "2015-10-13T17:57:37Z",
                    "institution_code": "chase",
                    "insured_name": "Frodo Baggins",
                    "interest_rate": 1,
                    "is_closed": false,
                    "is_hidden": false,
                    "last_payment": 100,
                    "last_payment_at": "2015-10-13T17:57:37Z",
                    "loan_amount": 1000,
                    "matures_on": "2015-10-13T17:57:37Z",
                    "member_guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                    "member_id": "member123",
                    "member_is_managed_by_user": false,
                    "metadata": "some metadata",
                    "minimum_balance": 100,
                    "minimum_payment": 10,
                    "name": "Test account 2",
                    "nickname": "My Checking",
                    "original_balance": 10,
                    "pay_out_amount": 10,
                    "payment_due_at": "2015-10-13T17:57:37Z",
                    "payoff_balance": 10,
                    "premium_amount": 1,
                    "routing_number": "68899990000000",
                    "started_on": "2015-10-13T17:57:37Z",
                    "subtype": "NONE",
                    "total_account_value": 1,
                    "type": "SAVINGS",
                    "updated_at": "2016-10-13T18:08:00Z",
                    "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54",
                    "user_id": "user123"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Account successfully updated"
          }
        },
        "description": "This endpoint allows you to update certain attributes of an `account` resource.",
        "summary": "This endpoint allows you to update certain attributes of an `account` resource.",
        "requestBody": {
          "description": "account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/accounts/{account_id}/account_numbers": {
      "get": {
        "tags": [
          "Account Numbers"
        ],
        "operationId": "Account Numbers-index",
        "parameters": [
          {
            "name": "account_id",
            "description": "The unique identifier for the `member` associated with the account owner. Defined by MX.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "description": "The MX-assigned user ID.",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Array of account numbers associated with the `user_id` and `account_id`.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountNumber"
                  }
                },
                "example": {
                  "account_numbers": [
                    {
                      "account_guid": "ACT-06d7f45b-caae-0f6e-1384-01f52e75dcb1",
                      "account_number": "10001",
                      "guid": "ACN-8899832e-e5b4-42cd-aa25-bbf1dc889a8f",
                      "institution_number": "123",
                      "member_guid": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b",
                      "passed_validation": true,
                      "routing_number": "68899990000000",
                      "transit_number": "12345",
                      "user_guid": "USR-fa7537f3-48aa-a683-a02a-b18940482f54"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          }
        },
        "description": "This endpoint returns a list of account numbers associated with the specified `account`.",
        "summary": "This endpoint returns a list of account numbers associated with the specified `account`."
      }
    },
    "/users/{user_guid}/taggings": {
      "post": {
        "tags": [
          "Taggings"
        ],
        "operationId": "Taggings-create",
        "parameters": [
          {
            "name": "tag_guid",
            "description": "tag_guid",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_guid",
            "description": "transaction_guid",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tagging"
                }
              }
            }
          },
          "200": {
            "description": "Tagging successfully created."
          }
        },
        "description": "Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs. With a `tagging`, a transaction can be assigned a specific tag, either the default `business` tag, or any other user-created tag.",
        "summary": "Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs. With a `tagging`, a transaction can be assigned a specific tag, either the default `business` tag, or any other user-created tag."
      },
      "get": {
        "tags": [
          "Taggings"
        ],
        "operationId": "Taggings-index",
        "parameters": [
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tagging"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Taggings successfully retrieved."
          }
        },
        "description": "Use this endpoint to retrieve a paginated list of all the taggings associated with a specific `user`.",
        "summary": "Use this endpoint to retrieve a paginated list of all the taggings associated with a specific `user`."
      }
    },
    "/users/{user_guid}/taggings/{tagging_guid}": {
      "delete": {
        "tags": [
          "Taggings"
        ],
        "operationId": "Taggings-destroy",
        "parameters": [
          {
            "name": "tagging_guid",
            "description": "Scope response to tagging_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tagging successfully deleted."
          }
        },
        "description": "Use this endpoint to delete a `tagging` according to its unique GUID. If successful, the API will respond with an empty body and a status of `204 NO Content`.",
        "summary": "Use this endpoint to delete a `tagging` according to its unique GUID. If successful, the API will respond with an empty body and a status of `204 NO Content`."
      },
      "get": {
        "tags": [
          "Taggings"
        ],
        "operationId": "Taggings-show",
        "parameters": [
          {
            "name": "tagging_guid",
            "description": "Scope response to tagging_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tagging"
                }
              }
            }
          },
          "200": {
            "description": "Tagging successfully retrieved."
          }
        },
        "description": "Use this endpoint to read the attributes of a `tagging` according to its unique GUID.",
        "summary": "Use this endpoint to read the attributes of a `tagging` according to its unique GUID."
      },
      "put": {
        "tags": [
          "Taggings"
        ],
        "operationId": "Taggings-update",
        "parameters": [
          {
            "name": "tag_guid",
            "description": "tag_guid",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagging_guid",
            "description": "Scope response to tagging_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_guid",
            "description": "Scope response to user_guid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tagging"
                }
              }
            }
          },
          "200": {
            "description": "Tagging successfully updated."
          }
        },
        "description": "Use this endpoint to update a `tagging`.",
        "summary": "Use this endpoint to update a `tagging`."
      }
    },
    "/institutions/{institution_code}/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "operationId": "Credentials-index",
        "parameters": [
          {
            "name": "institution_code",
            "description": "Scope response to institution_code",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Credential"
                  }
                },
                "example": {
                  "credentials": [
                    {
                      "display_order": 1,
                      "field_name": "LOGIN",
                      "field_type": "TEXT",
                      "guid": "CRD-1ec152cd-e628-e81a-e852-d1e7104624da",
                      "label": "Username",
                      "type": "TEXT"
                    }
                  ],
                  "pagination": {
                    "current_page": 1,
                    "per_page": 25,
                    "total_entries": 1,
                    "total_pages": 1
                  }
                }
              }
            }
          },
          "200": {
            "description": "List of credentials successfully retrieved."
          }
        },
        "description": "This endpoint returns an array which contains information on every non-MFA `credential` associated with a specific `institution`.",
        "summary": "This endpoint returns an array which contains information on every non-MFA `credential` associated with a specific `institution`."
      }
    }
  },
  "tags": [
    {
      "name": "Access Tokens Controller",
      "description": "This document describes the API endpoints for `access_tokens`."
    },
    {
      "name": "Account Numbers",
      "description": "This document describes the Account Number API endpoints."
    },
    {
      "name": "Account Owners",
      "description": "This document describes the API endpoint for viewing owners of an account."
    },
    {
      "name": "Accounts",
      "description": "This document describes the Accounts API endpoints"
    },
    {
      "name": "AccountVerification",
      "description": "This document describes the AccountVerification API endpoint"
    },
    {
      "name": "Authorization Codes",
      "description": "This document describes the Authorization Codes API endpoint"
    },
    {
      "name": "Categories",
      "description": "This document describes the API endpoints for creating, reading, updating, and deleting transaction categories."
    },
    {
      "name": "Credentials",
      "description": "This document describes the API endpoint for non-MFA credentials."
    },
    {
      "name": "Holdings",
      "description": "This document describes the Holdings API endpoints. Holdings represent a stock, bond, or other type of investment."
    },
    {
      "name": "InsightsController",
      "description": "MXinsights allow partners to provide unique, personalized insights into an end user’s financial data. These insights can power your product even if you choose to build your own UI."
    },
    {
      "name": "Institutions",
      "description": "This document describes the Institutions API endpoints."
    },
    {
      "name": "Managed Accounts",
      "description": "This document describes the Managed Accounts API endpoints."
    },
    {
      "name": "Managed Institutions",
      "description": "This document describes the Managed Institutions API endpoint. A partner-managed institution is a representation of your real-world financial institution on the MX platform."
    },
    {
      "name": "ManagedMembers",
      "description": "A partner-managed `member` represents the relationship between a `user` and your `institution`; the member’s data is managed by you.\n    Partner-managed members are not aggregated, and thus do not have credentials."
    },
    {
      "name": "ManagedTransactions",
      "description": "A `transaction` represents any instance in which money moves into or out of an `account`. This could be a purchase at a business, a payroll deposit, a transfer from one `account` to another, an ATM withdrawal, etc. Each transaction belongs to only one `account`.\n    A partner-managed `transaction` is one which belongs to a partner-managed `member` and `account`. Data on these transactions is not gathered through aggregation. Partners must provide and update all data on managed transactions."
    },
    {
      "name": "Members",
      "description": "A member represents the relationship between a `user` and an `institution`, and creating one is how you connect one to the other. Multiple members may be attached to a single `user`, e.g., one `member` for their bank, another for their mortgage provider, another for their credit card provider, etc.\n    (https://docs.mx.com/api#api_architecture_and_resource_structure Learn more about members) and how they fit into the overall MX data architecture."
    },
    {
      "name": "Merchant Locations",
      "description": "Merchant locations detail the physical address, longitude, latitude, contact information, etc. for a specific location of a merchant."
    },
    {
      "name": "Merchants",
      "description": "A `merchant` contains information about the merchant, business, company, or seller associated with a specific `transaction`. This information includes a name, logo, and website."
    },
    {
      "name": "MicroDeposits",
      "description": "This document describes the MicroDeposits endpoints."
    },
    {
      "name": "PaymentAccounts",
      "description": "This document describes the PaymentAccounts endpoint."
    },
    {
      "name": "Statements",
      "description": "This document describes the Account Statements API endpoints. Some institutions allow developers to access account statements associated with a particular `member`. The process for fetching and then reading account statements is much like standard aggregation, and it may trigger multi-factor authentication."
    },
    {
      "name": "Taggings",
      "description": "This document describes the API endpoints for association of a `tag` to a `transaction`.  In other words, with a `tagging`, a transaction can be assigned a specific tag, either the default `business` tag, or any other user-created tag."
    },
    {
      "name": "Tags",
      "description": "This document describes the API endpoints for custom tags."
    },
    {
      "name": "TaxStatements",
      "description": "Some institutions allow developers to access tax documents associated with a particular member. The process for fetching and then reading tax documents is much like standard aggregation, and it may trigger multi-factor authentication.\n    Currently, tax document endpoints can only be accessed in the production environment. Hence examples in this section show requests to the production environment."
    },
    {
      "name": "Transaction Rules",
      "description": "This document describes the API endpoints for Transaction rules. \n\nA transaction rule allows partners to specify a match_description and a category; all transactions matching the specified description will be placed in the chosen category.\n\nTransaction rules override the default category MX gives to a transaction. Once a rule is created, all past transactions with a matching cleansed description are placed in the partner-chosen category, and any future transactions will be placed in the chosen category as well.\n\nFor example, creating a rule with the match_description “Wal-mart” and the category_guid for “Groceries” will automatically apply that category_guid to any transaction with a matching description, including both existing and future transactions.\n\nPartners may also provide an optional description when creating or updating a transaction_rule. This string will replace all matched transactions’ description value."
    },
    {
      "name": "Transactions",
      "description": "This document describes the Transaction API endpoints."
    },
    {
      "name": "Users",
      "description": "This document describes the Users API endpoints"
    }
  ],
  "components": {
    "schemas": {
      "Credential": {
        "type": "object",
        "properties": {
          "display_order": {
            "type": "integer",
            "description": "The order in which the credential should be displayed to the end user; lower numbers should be displayed first."
          },
          "field_name": {
            "type": "string",
            "description": "The name of the credential field for the institution, e.g., “LOGIN”."
          },
          "field_type": {
            "type": "string",
            "description": "The type of field for this credential, e.g., `TEXT`, `OPTIONS`, `TOKEN`. This field is deprecated. Use `type` instead."
          },
          "guid": {
            "type": "string",
            "description": "A unique identifier for the `credential`. Defined by MX."
          },
          "label": {
            "type": "string",
            "description": "A label for the `credential`, intended to be readable by the end user, e.g., `Username`."
          },
          "type": {
            "type": "string",
            "description": "The type of field for this credential, e.g., `TEXT`, `OPTIONS`, `TOKEN`."
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The account number associated with the `account`. This will typically be a masked or partial account number.",
            "example": "5366"
          },
          "apr": {
            "type": "decimal",
            "description": "The annual percentage rate associated with the `account`.",
            "example": 1.0
          },
          "apy": {
            "type": "decimal",
            "description": "The annual percentage yield associated with the `account`.",
            "example": 1.0
          },
          "available_balance": {
            "type": "decimal",
            "description": "The balance that is *available for use* in asset accounts like checking and savings. `PENDING` transactions are typically taken into account with the available balance, but this may not always be the case.\n\n`available_balance` will usually be a positive value for all account types, determined in the same way as the `balance` field.",
            "example": 1000.0
          },
          "available_credit": {
            "type": "decimal",
            "description": "The amount of credit *available for use* in liability accounts like credit cards and lines of credit. `PENDING` transactions are typically taken into account with available credit, but this may not always be the case.\n\n`available_credit` will usually be a positive value for all account types, determined in the same way as the `balance` field.",
            "example": 1000.0
          },
          "balance": {
            "type": "decimal",
            "description": "The current balance of the account. `PENDING` transactions are typically not taken into account with the current balance, but this may not always be the case. This is the value used for the account balance displayed in MX UIs.\n\nThe balance will usually be a positive value for all account types. Asset-type accounts (`CHECKING`, `SAVINGS`, `INVESTMENT`) may have a negative balance if they are in overdraft. Debt-type accounts (`CREDIT_CARD`, `LOAN`, `LINE_OF_CREDIT`, `MORTGAGE`) may have a negative balance if they are overpaid.",
            "example": 1000.0
          },
          "cash_balance": {
            "type": "decimal",
            "description": "The cash balance of the `account`.",
            "example": 1000.0
          },
          "cash_surrender_value": {
            "type": "decimal",
            "description": "The sum of money paid to the policyholder or annuity holder in the event the policy is voluntarily terminated before it matures, or the insured event occurs.",
            "example": 1000.0
          },
          "created_at": {
            "type": "string",
            "description": "The date and time at which the account was created on the MX Platform.",
            "example": "2016-10-13T17:57:37Z"
          },
          "credit_limit": {
            "type": "decimal",
            "description": "The credit limit associated with the `account`.",
            "example": 100.0
          },
          "currency_code": {
            "type": "string",
            "description": "The three-character ISO 4217 currency code.",
            "example": "USD"
          },
          "day_payment_is_due": {
            "type": "integer",
            "description": "The day of the month the payment is due. For example, the 14th is passed as `14`.",
            "example": 20
          },
          "death_benefit": {
            "type": "integer",
            "description": "The amount paid to the beneficiary of the account upon death of the account owner.",
            "example": 1000
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `account`. Defined by MX.",
            "example": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1"
          },
          "holdings_value": {
            "type": "decimal",
            "description": "The sum of all long holdings within this account, not including any that are shorted and not including cash.",
            "example": 1000.0
          },
          "id": {
            "type": "string",
            "description": "The unique partner-defined identifier for the `account`.",
            "example": "1040434698"
          },
          "imported_at": {
            "type": "string",
            "description": "The date and time at which the `account` was last successfully aggregated and received data.",
            "example": "2015-10-13T17:57:37Z"
          },
          "institution_code": {
            "type": "string",
            "description": "A unique identifier for the `institution` associated with this `account`. Defined by MX.",
            "example": "chase"
          },
          "insured_name": {
            "type": "string",
            "description": "The name of the insured individual.",
            "example": "Frodo Baggins"
          },
          "interest_rate": {
            "type": "decimal",
            "description": "The interest rate associated with the `account`.",
            "example": 1.0
          },
          "is_closed": {
            "type": "boolean",
            "description": "This indicates whether an account has been closed."
          },
          "is_hidden": {
            "type": "boolean",
            "description": "This indicates whether the account is hidden. Defaults to `false`."
          },
          "last_payment_at": {
            "type": "string",
            "description": "The date and time of the most recent payment on the `account`.",
            "example": "2015-10-13T17:57:37Z"
          },
          "last_payment": {
            "type": "decimal",
            "description": "The amount of the most recent payment on the `account`.",
            "example": 100.0
          },
          "loan_amount": {
            "type": "decimal",
            "description": "The amount of the loan associated with the `account`.",
            "example": 1000.0
          },
          "matures_on": {
            "type": "string",
            "description": "The date on which the `account` matures.",
            "example": "2015-10-13T17:57:37Z"
          },
          "member_guid": {
            "type": "string",
            "description": "The unique identifier for the `member` associated with the `account`. Defined by MX.",
            "example": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b"
          },
          "member_id": {
            "type": "string",
            "description": "The unique, partner-defined, identifier for the `member` associated with this account.",
            "example": "member123"
          },
          "member_is_managed_by_user": {
            "type": "boolean",
            "description": "This indicates whether the associated `member` is managed by the user or the MX partner. Members created with the managed member feature will have this field set to false."
          },
          "metadata": {
            "type": "string",
            "description": "Additional information a partner can store on the `account`.",
            "example": "some metadata regarding this account"
          },
          "minimum_balance": {
            "type": "decimal",
            "description": "The minimum balance associated with the `account`.",
            "example": 100.0
          },
          "minimum_payment": {
            "type": "decimal",
            "description": "The minimum payment required for an account. This can apply to any debt account.",
            "example": 10.0
          },
          "name": {
            "type": "string",
            "description": "The human-readable name for the `account`.",
            "example": "Test account 2"
          },
          "nickname": {
            "type": "string",
            "description": "An alternate name for the `account`.",
            "example": "My Checking"
          },
          "original_balance": {
            "type": "decimal",
            "description": "The original balance associated with the `account`. This will always be positive.",
            "example": 10.0
          },
          "pay_out_amount": {
            "type": "decimal",
            "description": "The amount paid out to the insured individual or beneficiary under the conditions of the insurance policy.",
            "example": 10.0
          },
          "payment_due_at": {
            "type": "string",
            "description": "The date and time at which the next payment is due on the `account`.",
            "example": "2015-10-13T17:57:37Z"
          },
          "payoff_balance": {
            "type": "decimal",
            "description": "The payoff balance for a debt `account`. This will normally be a positive number.",
            "example": 10.0
          },
          "premium_amount": {
            "type": "decimal",
            "description": "The insurance policy’s premium amount.",
            "example": 1.0
          },
          "routing_number": {
            "type": "string",
            "description": "The routing number for the `account`.",
            "example": "68899990000000"
          },
          "started_on": {
            "type": "string",
            "description": "The date on which a debt account was started.",
            "example": "2015-10-13T17:57:37Z"
          },
          "subtype": {
            "type": "string",
            "description": "The account’s subtype, e.g., `PLAN_401_K`, `MONEY_MARKET`, or `HOME_EQUITY`.",
            "example": "NONE"
          },
          "total_account_value": {
            "type": "decimal",
            "description": "The sum of the long and short positions, the sweep account and/or cash balance, and any margin debt associated with a particular account. This amount includes the market value of all positions held in the account and is reduced by any debit balance and the amount of short options positions that are “in the money”. This may sum to a negative value, and it **does not** represent an account balance.",
            "example": 1.0
          },
          "type": {
            "type": "string",
            "description": "The general or parent type of the `account`.",
            "example": "SAVINGS"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time at which the `account` was most recently updated.",
            "example": "2016-10-13T18:08:00Z"
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the `user` associated with the `account`. Defined by MX.",
            "example": "USR-fa7537f3-48aa-a683-a02a-b18940482f54"
          },
          "user_id": {
            "type": "string",
            "description": "The unique, partner-defined, identifier for the `user` associated with this `account`.",
            "example": "user123"
          }
        },
        "required": [
          "balance",
          "name",
          "type"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "The date and time the `category` was created. This field will always be `null` when is_default is `true`."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `category`. Defined by MX."
          },
          "is_default": {
            "type": "boolean",
            "description": "This indicates whether the `category` is an MX-created default `category`. This will always be `false` for custom categories."
          },
          "is_income": {
            "type": "boolean",
            "description": "This indicates whether the `category` represents income. This will always be `false` for custom categories."
          },
          "metadata": {
            "type": "string",
            "description": "This is additional information a partner can store on the custom `category`."
          },
          "name": {
            "type": "string",
            "description": "The name of the custom `category`."
          },
          "parent_guid": {
            "type": "string",
            "description": "The unique identifier for the parent `category`. Defined by MX."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the `category` was last updated. This field will always be `null` when `is_default` is `true`."
          }
        },
        "required": [
          "name",
          "parent_guid"
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Unique identifier for the tag. Defined by MX."
          },
          "name": {
            "type": "string",
            "description": "The name of the tag. Created by the user."
          },
          "user_guid": {
            "type": "string",
            "description": "Unique identifier for the user. Defined by MX."
          }
        }
      },
      "Tagging": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "The identifier for the `tagging`. Defined by MX."
          },
          "member_is_managed_by_user": {
            "type": "boolean",
            "description": "This indicates whether the `member` associated with the `transaction` is managed by the end user. This defaults to `true` for members created with the MX Platform API."
          },
          "tag_guid": {
            "type": "string",
            "description": "The unique identifier for the `tag` associated with the `tagging`. Defined by MX."
          },
          "transaction_guid": {
            "type": "string",
            "description": "The unique identifier for the `transaction` associated with the `tagging`. Defined by MX."
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the `user` associated with the `tagging`. Defined by MX."
          }
        }
      },
      "AuthorizationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "One-time use authorization code."
          }
        }
      },
      "PaymentAccount": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "The unique identifier for the `account`. Defined by MX."
          },
          "account_name": {
            "type": "string",
            "description": "The human-readable name for the `account`."
          },
          "account_number": {
            "type": "string",
            "description": "The banking account number associated with a particular `account`."
          },
          "account_type": {
            "type": "string",
            "description": "The parent type of the `account`, e.g., `CHECKING` or `SAVINGS`."
          },
          "available_balance": {
            "type": "number",
            "description": "The balance that is available for use in asset accounts like checking and savings. It is usually a positive value for all account types, determined in the same way as the balance field."
          },
          "balance": {
            "type": "number",
            "description": "The current balance of the `account`. It is usually a positive value for all account types. Asset-type accounts (`CHECKING`, `SAVINGS`, `INVESTMENT`) may have a negative balance if they are in overdraft. Debt-type accounts (`CREDIT_CARD`, `LOAN`, `LINE_OF_CREDIT`, `MORTGAGE`) may have a negative balance if they are overpaid."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the payment account was created."
          },
          "member_guid": {
            "type": "string",
            "description": "The unique identifier for the member associated with this `account`. Defined by MX."
          },
          "routing_number": {
            "type": "string",
            "description": "The routing number for the `account`."
          },
          "transit_number": {
            "type": "string",
            "description": "The five-digit number identifying the branch of a Canadian financial institution."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time at which the `account` was most recently updated."
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the user associated with this account. Defined by MX."
          }
        }
      },
      "AccountOwner": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "The unique identifier for the `account` associated with the account owner. Defined by MX.",
            "example": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1"
          },
          "address": {
            "type": "string",
            "description": "The account owner’s street address.",
            "example": "123 This Way"
          },
          "city": {
            "type": "string",
            "description": "The account owner’s city.",
            "example": "Middlesex"
          },
          "country": {
            "type": "string",
            "description": "The account owner’s country.",
            "example": "US"
          },
          "email": {
            "type": "string",
            "description": "The account owner’s email address.",
            "example": "donnie@darko.co"
          },
          "first_name": {
            "type": "string",
            "description": "The account owner’s first name. This may also include a middle name. This field will be `null` unless name splitting has been enabled. Contact MX to have this feature enabled.",
            "example": "Donnie"
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the account owner. Defined by MX.",
            "example": "ACO-63dc7714-6fc0-4aa2-a069-c06cdccd1af9"
          },
          "last_name": {
            "type": "string",
            "description": "The account owner’s last name. This field will be `null`` unless name splitting has been enabled. Contact MX to have this feature enabled.",
            "example": "Darko"
          },
          "member_guid": {
            "type": "string",
            "description": "The unique identifier for the `member` associated with the account owner. Defined by MX.",
            "example": "ACO-63dc7714-6fc0-4aa2-a069-c06cdccd1af9"
          },
          "owner_name": {
            "type": "string",
            "description": "The account owner’s name.",
            "example": "Donnie Darko"
          },
          "phone": {
            "type": "string",
            "description": "The account owner’s phone number.",
            "example": "555-555-5555"
          },
          "postal_code": {
            "type": "string",
            "description": "The the account owner’s postal code.",
            "example": "00000-0000"
          },
          "state": {
            "type": "string",
            "description": "The account owner’s state.",
            "example": "VA"
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the `user` associated with the account owner. Defined by MX.",
            "example": "USR-fa7537f3-48aa-a683-a02a-b18940482f54"
          }
        }
      },
      "AccountVerification": {
        "type": "object",
        "properties": {
          "account_name": {
            "type": "string",
            "description": "The name of the account associated with the verification.",
            "example": "Test account 2"
          },
          "account_number": {
            "type": "string",
            "description": "The account number of the account associated with the verification.",
            "example": "5366"
          },
          "account_number_guid": {
            "type": "string",
            "description": "The unique identifier for the account associate with the verification. Defined by MX.",
            "example": "ACT-06d7f44b-caae-0f6e-1384-01f52e75dcb1"
          },
          "account_type": {
            "type": "string",
            "description": "The name of the (https://docs.mx.com/api#core_resources_accounts_account_fields account type).",
            "example": "SAVINGS"
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the verification was created, given in ISO 8601 format.",
            "example": "2016-10-13T17:57:37Z"
          },
          "institution_code": {
            "type": "string",
            "description": "The code for an institution associated with the verification, e.g., “chase-bank” or “wells-fargo-bank.” May be `null` for institutions which are not in the MX system.",
            "example": "chase"
          },
          "institution_name": {
            "type": "string",
            "description": "An easy-to-read name for an institution, e.g., “Chase Bank” or “Wells Fargo Bank.” May be `null` for institutions which are not in the MX system.",
            "example": "Chase Bank"
          },
          "micro_deposit_guid": {
            "type": "string",
            "description": "The unique identifier for the microdeposit associated with this verification. Defined by MX.",
            "example": "MCD-7ed79542-884d-2b1b-dd74-501c5cc9d25b"
          },
          "routing_number": {
            "type": "string",
            "description": "The routing number for the account associated with the verification.",
            "example": "68899990000000"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time at which the verification was last updated, given in ISO 8601 format.",
            "example": "2023-06-13T17:57:37Z"
          },
          "verification_method": {
            "type": "string",
            "description": "The name of the (https://docs.mx.com/microdeposits#api_endpoints_verification_methods verification method).",
            "example": "MICRO_DEPOSIT"
          },
          "verified_at": {
            "type": "string",
            "description": "When `\"verification_method\": \"CREDENTIALS\"`: The date and time at which the associated `account` was created. When `\"verification_method\": \"MICRO_DESPOSIT\"`: The date and time at which the associated microdeposit status changed from `DEPOSITED` to `VERIFIED`.",
            "example": "2023-06-13T17:57:37Z"
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "aggregated_at": {
            "type": "string",
            "description": "The date and time the most recent aggregation-type job was started, given in ISO 8601 format with a time component. A job will automatically be started when a member is created or its credentials are updated, unless the `skip_aggregation` parameter is used. Jobs can also be started via manual aggregations, background aggregations, API endpoints, or when opening an MX widget. A job can be a normal aggregation, or a premium job such as identification, verification, fetching statements, or fetching an extended transaction history.\nIf a `member` is deleted and then re-created with the `skip_aggregation` parameter set to true or if it is re-created within the throttle window (typically three hours), the previous value will be returned."
          },
          "background_aggregation_is_disabled": {
            "type": "boolean",
            "description": "This indicates whether background aggregation is disabled for the `member`."
          },
          "connection_status": {
            "type": "string",
            "description": "This indicates the state of a member’s aggregation. See member connection statuses (https://docs.mx.com/api#core_resources_members_connection_statuses) for more information."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `member`. Defined by MX."
          },
          "id": {
            "type": "string",
            "description": "The partner-defined unique identifier for the `member`."
          },
          "institution_code": {
            "type": "string",
            "description": "The unique identifier for the `institution` associated with the `member`. Defined by MX."
          },
          "is_being_aggregated": {
            "type": "boolean",
            "description": "This indicates whether the `member` was being aggregated at the time of the request."
          },
          "is_managed_by_user": {
            "type": "string",
            "description": "This indicates whether the `member` is managed by the user or the MX partner. Members created with the managed member feature will have this field set to false."
          },
          "is_oauth": {
            "type": "boolean",
            "description": "This indicates whether the `member` uses OAuth to authenticate. Defaults to `false`."
          },
          "metadata": {
            "type": "string",
            "description": "Additional information you can store on this `member`."
          },
          "name": {
            "type": "string",
            "description": "The name of the `member`."
          },
          "successfully_aggregated_at": {
            "type": "string",
            "description": "The date and time the `member` was last successfully aggregated."
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the `user` associated with the `member`. Defined by MX."
          },
          "user_id": {
            "type": "string",
            "description": "The unique partner-defined identifier for the `user` associated with the `member`."
          }
        }
      },
      "UserTransactionRule": {
        "type": "object",
        "properties": {
          "category_guid": {
            "type": "string",
            "description": "A unique identifier for the `category`. Defined by MX."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the `transaction_rule` was created, represented in (https://www.iso.org/iso-8601-date-and-time-format.html ISO 8601) format with a timestamp, e.g. `2015-04-13T12:01:23-06:00`."
          },
          "description": {
            "type": "string",
            "description": "The matched transaction’s `description` will be updated to the string provided here."
          },
          "guid": {
            "type": "string",
            "description": "A unique identifier for the `transaction_rule`. Defined by MX."
          },
          "match_description": {
            "type": "string",
            "description": "A string used to find a `transaction` to which the rule will be applied. Transaction matching is based on a comparison of `match_description` to a transaction’s cleansed `description`."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the `transaction_rule` was created, represented in (https://www.iso.org/iso-8601-date-and-time-format.html ISO 8601) format with a timestamp, e.g. `2015-04-13T12:01:23Z`."
          },
          "user_guid": {
            "type": "string",
            "description": "A unique identifier for the `user` to which the `transaction_rule` belongs. Defined by MX."
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "The unique identifier for the `account` associated with the `transaction`. Defined by MX."
          },
          "account_id": {
            "type": "string",
            "description": "The unique partner-defined identifier for the `account` associated with the `transaction`. This can only be set for partner-managed accounts. It should be ignored for user-managed transactions, even in occasional cases where it may return with a value."
          },
          "amount": {
            "type": "decimal",
            "description": "The monetary amount of the `transaction`."
          },
          "category": {
            "type": "string",
            "description": "The category of the `transaction`."
          },
          "category_guid": {
            "type": "string",
            "description": "The unique identifier for the `category` assigned to the `transaction``."
          },
          "check_number_string": {
            "type": "string",
            "description": "The check number for the `transaction`."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the `transaction` was created."
          },
          "currency_code": {
            "type": "string",
            "description": "The three-character ISO 4217 currency code, e.g. `USD`."
          },
          "date": {
            "type": "string",
            "description": "The date on which the `transaction` took place. This is the field used when searching for transactions by date. This field is generally the same as `transacted_at`, but uses `posted_at` as a fallback."
          },
          "description": {
            "type": "string",
            "description": "A human-readable version of the `original_description` field described below, e.g., “Sam’s Club,” “Johnny’s Tavern.” This is provided by the MX Platform."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `transaction`. Defined by MX."
          },
          "id": {
            "type": "string",
            "description": "The unique partner-defined identifier for the `transaction``. This can only be set for partner-managed transactions. It should be ignored for user-managed transactions, even in occasional cases where it may return with a value."
          },
          "is_bill_pay": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents a bill pay."
          },
          "is_direct_deposit": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents a direct deposit."
          },
          "is_expense": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents an expense."
          },
          "is_fee": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents a fee."
          },
          "is_income": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents income."
          },
          "is_international": {
            "type": "boolean",
            "description": "If the `transaction` is international as defined by the data provider, this field will be `true`. If the data provider determines it is not international then it will be `false`. It will be `null` if the data provider does not have this information."
          },
          "is_overdraft_fee": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents an overdraft fee."
          },
          "is_payroll_advance": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents a payroll advance."
          },
          "is_recurring": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` is a recurring credit or debit."
          },
          "is_subscription": {
            "type": "boolean",
            "description": "This indicates whether the `transaction` represents a payment for a subscription service such as Netflix or Audible."
          },
          "latitude": {
            "type": "decimal",
            "description": "The latitude of the location where the `transaction` occurred. The number is a signed decimal (e.g. Rio de Janeiro’s latitude is `-22.9027800` and Tokyo’s latitude is `35.689488`)."
          },
          "localized_description": {
            "type": "string",
            "description": "A human-readable description of the `transaction`, provided in a local language."
          },
          "localized_memo": {
            "type": "string",
            "description": "Additional descriptive information about the `transaction`, provided in a local language."
          },
          "longitude": {
            "type": "decimal",
            "description": "The longitude of the location where the `transaction` occurred. The number is a signed decimal (e.g. Rio de Janeiro’s longitude is `-43.2075000` and Tokyo’s longitude is `139.691706`)."
          },
          "member_guid": {
            "type": "string",
            "description": "The unique identifier for the `member` associated with the `transaction` Defined by MX."
          },
          "member_is_managed_by_user": {
            "type": "boolean",
            "description": "This indicates whether the associated `member` is managed by the user or the MX partner. Members created with the managed member feature will have this field set to false."
          },
          "memo": {
            "type": "string",
            "description": "This field contains additional descriptive information about the `transaction`."
          },
          "merchant_category_code": {
            "type": "integer",
            "description": "The ISO 18245 category code for the `transaction`."
          },
          "merchant_guid": {
            "type": "string",
            "description": "The unique identifier for the `merchant` associated with this `transaction`. Defined by MX."
          },
          "merchant_location_guid": {
            "type": "string",
            "description": "The unique identifier for the `merchant_location`` associated with this `transaction`. Defined by MX."
          },
          "original_description": {
            "type": "string",
            "description": "The original description of the `transaction` as provided by our data feed. See `description` above for more information."
          },
          "posted_at": {
            "type": "string",
            "description": "The date and time the `transaction` was posted to the account."
          },
          "status": {
            "type": "string",
            "description": "The status of the `transaction``. This will be either `POSTED` or `PENDING`."
          },
          "top_level_category": {
            "type": "string",
            "description": "The parent category assigned to this `transaction`’s category."
          },
          "transacted_at": {
            "type": "string",
            "description": "The date and time the `transaction` took place."
          },
          "type": {
            "type": "string",
            "description": "The type of `transaction`. This will be either `CREDIT` or `DEBIT`."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the transaction was last updated."
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the `user` associated with this `transaction`. Defined by MX."
          },
          "user_id": {
            "type": "string",
            "description": "The unique partner-defined identifier for the `user` associated with the `transaction`."
          }
        }
      },
      "Statement": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "The unique identifier for the `account` associated with the `statement`. Defined by MX."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the `statement` was created."
          },
          "content_hash": {
            "type": "string",
            "description": "An SHA-256 hash value of the `statement`'s byte payload."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `statement``. Defined by MX."
          },
          "member_guid": {
            "type": "string",
            "description": "A unique identifier for the member to which the `statement` belongs. Defined by MX."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time at which the `statement` was last updated."
          },
          "url": {
            "type": "string",
            "description": "A URI for accessing the byte payload of the `statement`."
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the `user` associated with the `statement`. Defined by MX."
          }
        }
      },
      "Holding": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "The unique identifier for the `account` associated with the `holding``. Defined by MX."
          },
          "cost_basis": {
            "type": "decimal",
            "description": "The cost basis is the original value of an asset adjusted for stock splits, dividends, and capital distributions."
          },
          "created_at": {
            "type": "string",
            "description": "Date and time the `holding` was created, represented in {https://www.iso.org/iso-8601-date-and-time-format.html ISO 8601} format, with a timestamp."
          },
          "currency_code": {
            "type": "string",
            "description": "The three-character ISO 4217 currency code."
          },
          "cusip": {
            "type": "string",
            "description": "The Committee on Uniform Securities Identification Procedures ({https://www.sec.gov/answers/cusip.htm CUSIP}) code, an identification number assigned to stocks and registered bonds."
          },
          "daily_change": {
            "type": "decimal",
            "description": "The change from the previous day in the price of the `holding`."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the `holding`."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `holding`. Defined by MX."
          },
          "holding_type": {
            "type": "string",
            "description": "The type of `holding`, e.g., mutual fund, bond, etc."
          },
          "holding_type_id": {
            "type": "string",
            "description": "The type of `holding`, given as an integer."
          },
          "id": {
            "type": "string",
            "description": "The unique partner-defined identifier for the `holding`."
          },
          "market_value": {
            "type": "decimal",
            "description": "The market value of the `holding`."
          },
          "member_guid": {
            "type": "string",
            "description": "The unique identifier for the `member` associated with the `holding`."
          },
          "metadata": {
            "type": "string",
            "description": "Additional information you can store on this `holding`."
          },
          "purchase_price": {
            "type": "string",
            "description": "The purchase price of the `holding`."
          },
          "shares": {
            "type": "decimal",
            "description": "The number of shares for the `holding`."
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol, i.e. the abbreviation used to uniquely identify publicly traded stocks, bonds, mutual funds, and ETFs."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the `holding` was last updated, represented in {https://www.iso.org/iso-8601-date-and-time-format.html ISO 8601} format with timestamp."
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the `user` associated with the `holding`."
          }
        },
        "description": "Holdings represent a stock, bond, or other type of investment."
      },
      "Token": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The token which grants access to the user data allowed by the scope. Used in subsequent processor requests."
          },
          "expires_at": {
            "type": "string",
            "description": "The date and time at which the `access_token` expires. This occurs 60 days from the time the token was issued."
          },
          "scope": {
            "type": "string",
            "description": "The scope of data access granted by the `access_token`. See (https://docs.mx.com/api#processor_token_client_endpoints_authorization_code scope parameters) for more information. This field is under active beta development; details and functionality may change at any time."
          },
          "token_type": {
            "type": "string",
            "description": "This endpoint returns a bearer token."
          }
        }
      },
      "MicroDeposit": {
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "The account number of the account associated with the microdeposit."
          },
          "account_type": {
            "type": "string",
            "description": "The name of the (https://docs.mx.com/api#core_resources_accounts_account_fields account type)."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the microdeposit was created, given in ISO 8601 format."
          },
          "email": {
            "type": "string",
            "description": "The end user’s email address."
          },
          "first_name": {
            "type": "string",
            "description": "The end user’s first name."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the microdeposit. Defined by MX."
          },
          "institution_code": {
            "type": "string",
            "description": "The code for an institution associated with the microdeposit, e.g., “chase-bank” or “wells-fargo-bank.” May be `null` for institutions which are not in the MX system."
          },
          "institution_name": {
            "type": "string",
            "description": "An easy-to-read name for an institution, e.g., “Chase Bank” or “Wells Fargo Bank.” May be `null` for institutions which are not in the MX system."
          },
          "last_name": {
            "type": "string",
            "description": "The end user’s last name."
          },
          "routing_number": {
            "type": "string",
            "description": "The routing number for the account associated with the microdeposit."
          },
          "status": {
            "type": "string",
            "description": "The name of the current (https://docs.mx.com/microdeposits#api_endpoints_micro_deposit_statuses status)."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time at which the microdeposit was last updated, given in ISO 8601 format."
          },
          "verified_at": {
            "type": "string",
            "description": "The date and time at which the microdeposit status changed from `DEPOSITED` to `VERIFIED`."
          }
        }
      },
      "Institution": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "A unique identifier for each `institution`, defined by MX."
          },
          "instructional_text": {
            "type": "string",
            "description": "Text intended to help end users provide the correct credentials when creating a new member. May contain `<a></a>` tags to link to explanatory material. Partners should render this text when end users are asked for their credentials."
          },
          "medium_logo_url": {
            "type": "string",
            "description": "The URL for a 100px X 100px logo for each `institution`. A generic logo is returned for institutions that don’t have one."
          },
          "name": {
            "type": "string",
            "description": "An easy-to-read name for an `institution`, e.g., “Chase Bank” or “Wells Fargo Bank.”"
          },
          "small_logo_url": {
            "type": "string",
            "description": "The URL for a 50px X 50px logo for each `institution`. A generic logo is returned for institutions that don’t have one."
          },
          "supports_account_identification": {
            "type": "boolean",
            "description": "This indicates whether the `institution` supports account identification."
          },
          "supports_account_statement": {
            "type": "boolean",
            "description": "This indicates whether the `institution` provides access to account statements."
          },
          "supports_account_verification": {
            "type": "boolean",
            "description": "This indicates whether the `institution` supports account verification."
          },
          "supports_oauth": {
            "type": "boolean",
            "description": "This indicates whether the `institution` supports OAuth authentication."
          },
          "supports_transaction_history": {
            "type": "boolean",
            "description": "This indicates whether the `institution` allows access to up to 24 months of `transaction` data."
          },
          "url": {
            "type": "string",
            "description": "The URL for particular institution’s website , e.g., `www.chase.com``."
          }
        }
      },
      "Merchant": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "The date and time at which the `merchant` was created."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `merchant`. Defined by MX."
          },
          "logo_url": {
            "type": "string",
            "description": "The URL for a 100px X 100px logo for the `merchant`."
          },
          "logo_updated_at": {
            "type": "string",
            "description": "The date and time the logo associated with this `merchant` was last updated."
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for the `merchant` for display to the end user."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time at which the `merchant` was last updated."
          },
          "website_url": {
            "type": "string",
            "description": "The URL for the merchant’s website, e.g. `https://www.xfinity.com`."
          }
        },
        "description": "A `merchant`` contains information about the merchant, business, company, or seller associated with a specific transaction. This information includes a name, logo, and website."
      },
      "MerchantLocation": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "The city in which the `merchant` is located."
          },
          "country": {
            "type": "string",
            "description": "The country in which the `merchant` is located."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `merchant` location. Defined by MX."
          },
          "latitude": {
            "type": "decimal",
            "description": "The latitude of the `merchant` location. This number is a signed decimal (e.g., Rio de Janeiro’s latitude is -22.9027800 and Tokyo’s latitude is 35.689488)."
          },
          "longitude": {
            "type": "decimal",
            "description": "The longitude of the `merchant` location. This number is a signed decimal (e.g., Rio de Janeiro’s longitude is -43.2075000 and Tokyo’s longitude is 139.691706)."
          },
          "merchant_guid": {
            "type": "string",
            "description": "The unique identifier for the `merchant` to which this location belongs. Defined by MX."
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number for the `merchant` location."
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code in which the `merchant` is located."
          },
          "state": {
            "type": "string",
            "description": "The state in which the `merchant` is located."
          },
          "street_address": {
            "type": "string",
            "description": "The street address at which the `merchant` is located."
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the `merchant_location` was last updated."
          }
        },
        "description": "Merchant locations detail the physical address, longitude, latitude, contact information, etc. for a specific location of a merchant."
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The end user’s email address."
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the `user`. Defined by MX."
          },
          "id": {
            "type": "string",
            "description": "A unique, partner-defined, enforced identifier for the `user`."
          },
          "is_disabled": {
            "type": "boolean",
            "description": "This indicates whether the `user` has been disabled. Defaults to `false`."
          },
          "metadata": {
            "type": "string",
            "description": "Additional information you can store about this `user`. MX recommends using JSON-structured data."
          }
        }
      },
      "AccountNumber": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "The unique identifier for the account associated with a particular set of account and routing numbers. Defined by MX.",
            "example": "ACT-06d7f45b-caae-0f6e-1384-01f52e75dcb1"
          },
          "account_number": {
            "type": "string",
            "description": "The banking account number associated with a particular account.",
            "example": "10001"
          },
          "guid": {
            "type": "string",
            "description": "The unique identifier for the account number. Defined by MX.",
            "example": "ACN-8899832e-e5b4-42cd-aa25-bbf1dc889a8f"
          },
          "institution_number": {
            "type": "string",
            "description": "The three-digit number identifying a Canadian banking institution.",
            "example": "123"
          },
          "member_guid": {
            "type": "string",
            "description": "The unique identifier for the member associated with a particular set of account and routing numbers. Defined by MX.",
            "example": "MBR-7c6f361b-e582-15b6-60c0-358f12466b4b"
          },
          "passed_validation": {
            "type": "boolean",
            "description": "This indicates whether the account and routing numbers passed MX’s internal validity checks. If `true`, the account and routing/transit numbers are likely (but not guaranteed) to be valid. If `false``, either the account number, routing/transit number, or both are likely invalid.",
            "example": true
          },
          "routing_number": {
            "type": "string",
            "description": "The routing number for the financial institution associated with the account.",
            "example": "68899990000000"
          },
          "transit_number": {
            "type": "string",
            "description": "The five-digit number identifying the branch of a Canadian financial institution.",
            "example": "12345"
          },
          "user_guid": {
            "type": "string",
            "description": "The unique identifier for the user associated with a particular set of account and routing numbers. Defined by MX.",
            "example": "USR-fa7537f3-48aa-a683-a02a-b18940482f54"
          }
        }
      }
    },
    "securitySchemes": {}
  }
}